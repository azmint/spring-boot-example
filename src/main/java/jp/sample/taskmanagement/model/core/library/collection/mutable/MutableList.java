package jp.sample.taskmanagement.model.core.library.collection.mutable;import java.util.*;import java.util.function.Predicate;import java.util.function.UnaryOperator;import java.util.stream.Stream;public final class MutableList<E> implements Iterable<E> {	private final List<E> elements;	private MutableList(List<? extends E> elements) {		this.elements = new ArrayList<>(elements);	}	public static <E> MutableList<E> empty() {		return new MutableList<>(new ArrayList<>());	}	public static <E> MutableList<E> of(List<? extends E> elements) {		if (Objects.isNull(elements)) throw new IllegalArgumentException("elementsが指定されていません。");		return new MutableList<>(elements);	}	@SafeVarargs	public static <E> MutableList<E> of(E... elements) {		if (Objects.isNull(elements)) throw new IllegalArgumentException("elementsが指定されていません。");		List<E> list = Arrays.asList(elements);		return new MutableList<>(list);	}	public boolean isEmpty() {return elements.isEmpty();}	public boolean isPresent() { return !isEmpty(); }	public boolean contains(E e) {return elements.contains(e);}	public boolean add(E e) {return elements.add(e);}	public boolean remove(E e) {return elements.remove(e);}	public boolean containsAll(Collection<?> c) {return elements.containsAll(c);}	public boolean addAll(Collection<? extends E> c) {return elements.addAll(c);}	public boolean addAll(int index, Collection<? extends E> c) {return elements.addAll(index, c);}	public boolean removeAll(Collection<? extends E> c) {return elements.removeAll(c);}	public boolean retainAll(Collection<?> c) {return elements.retainAll(c);}	public void replaceAll(UnaryOperator<E> operator) {elements.replaceAll(operator);}	public void sort(Comparator<? super E> c) {elements.sort(c);}	public void clear() {elements.clear();}	public E get(int index) {return elements.get(index);}	public E set(int index, E element) {return elements.set(index, element);}	public void add(int index, E element) {elements.add(index, element);}	public E remove(int index) {return elements.remove(index);}	public int indexOf(E e) {return elements.indexOf(e);}	public int lastIndexOf(E e) {return elements.lastIndexOf(e);}	public ListIterator<E> listIterator() {return elements.listIterator();}	public ListIterator<E> listIterator(int index) {return elements.listIterator(index);}	public List<E> subList(int fromIndex, int toIndex) {return elements.subList(fromIndex, toIndex);}	public boolean removeIf(Predicate<? super E> filter) {return elements.removeIf(filter);}	public Stream<E> stream() {return elements.stream();}	public Stream<E> parallelStream() {return elements.parallelStream();}	@Override	public Iterator<E> iterator() {		return this.elements.iterator();	}	@Override	public boolean equals(Object o) {		if (this == o) return true;		if (!(o instanceof MutableList)) return false;		MutableList<?> that = (MutableList<?>) o;		return Objects.equals(elements, that.elements);	}	@Override	public int hashCode() {		return Objects.hash(elements);	}	@Override	public String toString() {		return "MutableList{" +			   "elements=" + elements +			   '}';	}}