package jp.sample.taskmanagement.model.core.library.collection.immutable;import java.util.*;import java.util.function.Function;import java.util.function.Predicate;import java.util.stream.Collectors;public class ImmutableList<E> implements Iterable<E> {	private final List<E> elements;	ImmutableList(List<E> elements) {		this.elements = Objects.requireNonNull(elements);	}	public static <E> ImmutableList<E> of(List<? extends E> elements) {		List<E> list = new ArrayList<>(elements);		return new ImmutableList<>(list);	}	@SafeVarargs	public static <E> ImmutableList<E> of(E... elements) {		Objects.requireNonNull(elements);		List<E> list = Arrays.asList(elements);		return new ImmutableList<>(list);	}	public <R> ImmutableList<R> map(Function<? super E, R> mapper) {		List<R> results = this.elements.stream()									   .map(mapper)									   .collect(Collectors.toList());		return new ImmutableList<>(results);	}	public ImmutableList<E> filter(Predicate<? super E> predicate) {		List<E> results = this.elements.stream()									   .filter(predicate)									   .collect(Collectors.toList());		return new ImmutableList<>(results);	}	public List<E> toStd() {		return new ArrayList<>(elements);	}	@Override	public Iterator<E> iterator() {		return this.elements.iterator();	}	@Override	public boolean equals(Object o) {		if (this == o) return true;		if (o == null || getClass() != o.getClass()) return false;		ImmutableList<?> immutableList = (ImmutableList<?>) o;		return Objects.equals(elements, immutableList.elements);	}	@Override	public int hashCode() {		return Objects.hash(elements);	}	@Override	public String toString() {		return "ImmutableList{" + "elements=" + elements + '}';	}}